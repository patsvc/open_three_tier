heat_template_version: 2013-05-23

description: >
  A blueprint that defines the Open Three Tier pattern. This stack includes a high-availability Apache Tomcat proxy server, two load-balanced Apache HTTP servers, and a MySQL database.

parameters:
  security_group:
    type: string
    description: 'Name of the security group'
    default: 'default'

############################
# Salt Specific Parameters
############################

  mysql_password: 
    description: This is the password for the mysql database
    label: Password (root)
    type: string
    hidden: True

  salt_master_address:
    type: string
    description: Hostname/IP address of the salt-master 
    label: Saltmaster address

  salt_api_token:
    type: string
    description: Security token for connecting to Salt API
    label: Salt api token
    hidden: True

  sw_repo_root:
    default: 'http://134.168.48.212:6111/sw_repo/'
    description: Software repository URL (e.g. http://x.x.x.x:8080/
    label: Software Repository URL
    type: string 

  flavor:
    type: string
    description: Flavor to be used for compute instance
    label: Flavor
    constraints:
    - custom_constraint: nova.flavor
   
  image_id:
    type: string
    description: OS Image to deploy onto
    label: OS Image
    constraints:
    - custom_constraint: glance.image

  key_name:
    type: string
    description: 'For most clouds, the name of the key-pair to be used for the compute instance; for VMware clouds, the contents of the public SSH key for the compute instance'
    label: SSH Key name
    constraints:
    - custom_constraint: nova.keypair

  private_network:
    type: string
    description: Network to deploy the instances onto
    label: Network

  public_network:
    type: string
    description: Network to deploy the instances onto
    label: Network

parameter_groups:
    - { label: 'Image Parameters', parameters: [flavor, key_name, image_id] }
    - { label: 'Hidden Parameters', parameters: [salt_master_address, salt_api_token, sw_repo_root] }

resources:
## REFERENCE {"fbd19302-f247-4816-b53e-a664f3dc72c1":{"type": "OS::Neutron::Net", "properties": {"name": "patterns-service-dev-net", "network_id": "fbd19302-f247-4816-b53e-a664f3dc72c1", "external":"false", "subnets": [{"id":"46fcd6d7-017e-437b-9921-d7fb9f76a7f2","name":"patterns-service-dev-subnet","cidr":"192.168.15.0\/24"}] }}}
 
  rhel_server_one:
    type: OS::Nova::Server
    properties:
      networks:
          - port: { get_resource: server_one_fbd19302-f247-4816-b53e-a664f3dc72c1_port  }
      name: load balancer
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: flavor }
      config_drive: "True"
      user_data_format: RAW
      user_data:
        get_resource: server_one_init
         
  
  server_one_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: bootstrap_salt}
      - config: {get_resource: haproxy}
      
  server_four_init:
    type: OS::Heat::MultipartMime
    depends_on: [ rhel_server_two, rhel_server_three ]
    properties:
      parts:
      - config: {get_resource: bootstrap_salt}
      - config: {get_resource: mysql}
      - config: {get_resource: create_pillar_file}
      - config: {get_resource: run_orchestration}
    
  
  bootstrap_salt:
    type: "OS::Heat::SoftwareConfig"
    properties:
      config:
        str_replace:
          template: |
            #!/usr/bin/env bash
            set -e
            if [ -f /etc/redhat-release ]; then
              curl -k "$SW_REPO_ROOTsalt/saltstack-latest-el$(rpm -qf --qf "%{VERSION}" /etc/redhat-release | cut -c1).x86_64.rpm" -o /tmp/salt.rpm >> /tmp/log 2>&1
              rpm -Uvh /tmp/salt.rpm
              #rpm -Uvh "$SW_REPO_ROOTsalt/saltstack-latest-el$(rpm -qf --qf "%{VERSION}" /etc/redhat-release | cut -c1).x86_64.rpm"
            elif [ -f /etc/lsb-release ]; then
              curl -k "$SW_REPO_ROOTsalt/saltstack-latest-trusty.x86_64.deb" -O
              dpkg -i saltstack-latest-trusty.x86_64.deb
              update-rc.d salt-minion start 80 2 3 4 5 .
            fi
            #chkconfig salt-minion on
            mkdir -p /etc/salt/pki/minion
            
            # retrieve saltMaster address from metadata if not passed
            saltMaster=$SALT_MASTER
            echo "master"$saltMaster >> /tmp/master
            token=$SALT_API_TOKEN
            echo "token"$token >> /tmp/master
            if [ -z $saltMaster ] ; then
              echo "no master" >> /tmp/master
              saltMaster=$(curl -s -k $SW_REPO_ROOTmetadata.yaml | awk '/salt_api_ip/ {print $2}')
            fi

            # Default log_level warning            
            cat > /etc/salt/minion << EOF
            log_level: warning
            master:
              - $saltMaster
            id: $STACK_ID-`hostname -s`
            mine_functions:
              network.interfaces: []
              grains.items: []
            mine_interval: 1
            EOF
            
            service salt-minion stop
            sleep 10
            service salt-minion start
            sleep 30

            curl -k $SW_REPO_ROOTsalt/salt-wrapper.py -o /opt/saltstack/embedded/bin/salt-wrapper.py

            /opt/saltstack/embedded/bin/salt-wrapper.py register dummyUser dummyPass -k $SALT_API_TOKEN
          params:
            $STACK_ID: { get_param: "OS::stack_id" }
            $SALT_MASTER: { get_param: salt_master_address }
            $SALT_API_TOKEN: { get_param: salt_api_token }
            $SW_REPO_ROOT: {get_param: sw_repo_root }

    
          
  haproxy:
    type: "OS::Heat::SoftwareConfig"
    properties:
      config:
        str_replace:
          template: |
            #!/usr/bin/env bash 
            #TODO support multiple roles. 
            roles=$ROLES
            #Create unique role names to ensure correct minion deployment. 
            #TODO include vm id for metering.
            UNIQUE_ROLE_ID="$ROLES_$IDENTIFIER"
            TARGET='"G@environment:$ENV and G@roles:'"$UNIQUE_ROLE_ID"'"' 
            echo "environment:" > /etc/salt/grains
            echo "  $ENV" >> /etc/salt/grains
            echo "identifier:" >> /etc/salt/grains
            echo "  $IDENTIFIER" >> /etc/salt/grains   
            echo "roles:">> /etc/salt/grains
            echo "  $UNIQUE_ROLE_ID" >> /etc/salt/grains
            service salt-minion restart
            sleep 30
            #Build Dynamic top.sls
            #PRE Create Server Prequiestes entry
            salt-call event.send 'generate/environment' '{name: "servers_prereqs", sid: "$IDENTIFIER",  tgt: "'identifier:$IDENTIFIER'", tgt_type: "grain", salt_env: "$ENV", sls: "'["base"]'", include_pillar: "true" }'
            #Salt state entry - define work of saltstate 
            salt-call event.send 'generate/environment' '{name:'" $UNIQUE_ROLE_ID"', sid: "$IDENTIFIER",  tgt:'" $TARGET"', tgt_type: "compound", salt_env: "$ENV", sls: $SLS , include_pillar: "true" }'      
          params:
            $ENV: base
            $ROLES: haproxy
            $IDENTIFIER: { get_param: 'OS::stack_name' }
            $SLS: '["haproxy","zeron"]'

  create_pillar_file:
    type: "OS::Heat::SoftwareConfig"
    properties:
      config:
        str_replace:
          template: |
            #!/usr/bin/env bash
            set -e
            totalMemory=`free -m | grep Mem | awk '{print $2}'`
            if [ $totalMemory -le 1024 ]; then
                initialHeapSize=512
                maximumHeapSize=1024
            elif [ $totalMemory -gt 1024 -a $totalMemory -le 2048 ]; then
                initialHeapSize=1024
                maximumHeapSize=2048
            elif [ $totalMemory -gt 2048 -a $totalMemory -le 4096 ]; then
                initialHeapSize=2048
                maximumHeapSize=4096
            elif [ $totalMemory -gt 4096 ]; then
                initialHeapSize=4096
                maximumHeapSize=8192
            fi
            cat << EOF > /tmp/pillar.yaml
            service_port: 80
            im_repo: $SW_REPO_ROOT
            artifact_repo_root: $SW_REPO_ROOT
            mysql_password: $MYSQL_PASSWORD
            ibm:
              sw_repo_root: $SW_REPO_ROOT
            EOF
          params:
            $SW_REPO_ROOT: {get_param: sw_repo_root }
            $MYSQL_PASSWORD: {get_param: mysql_password}

  run_orchestration:
    type: "OS::Heat::SoftwareConfig"
    properties:
      config:
        str_replace:
          template: |
            #!/usr/bin/env bash
            set -e
            /opt/saltstack/embedded/bin/salt-wrapper.py orchestrate_heat dummyUser dummyPass \
              --environment $ENV \
              --automation $WORKLOAD_AUTOMATION \
              --orchestration $ORCHESTRATION \
              --wait_url '$WAIT_URL' \
              --stack_id $STACK_ID \
              --pillar_file /tmp/pillar.yaml \
              --pillar stack_id=$STACK_ID \
              --reactor_flask \
              --salt_token $SALT_API_TOKEN

            echo  "            /opt/saltstack/embedded/bin/salt-wrapper.py orchestrate_heat dummyUser dummyPass \
              --environment $ENV \
              --automation $WORKLOAD_AUTOMATION \
              --orchestration $ORCHESTRATION \
              --wait_url '$WAIT_URL' \
              --stack_id $STACK_ID \
              --pillar_file /tmp/pillar.yaml \
              --pillar stack_id=$STACK_ID" \
              --reactor_flask \
              --salt_token $SALT_API_TOKEN >> /tmp/test
          params:
            $SALT_API_TOKEN: { get_param: salt_api_token}
            $ENV: base
            $WORKLOAD_AUTOMATION:  ibm_was
            $ORCHESTRATION: 3tier_lamp
            $STACK_ID:      { get_param: "OS::stack_id" }
            $WAIT_URL:      { get_resource: wait_handle }
 
  rhel_server_two:
    type: OS::Nova::Server
    depends_on: rhel_server_one
    properties:
      networks:
          - port: { get_resource: server_two_fbd19302-f247-4816-b53e-a664f3dc72c1_port  }
      name: webserver1
      image: { get_param: image_id }
      key_name: { get_param: key_name }
      flavor: { get_param: flavor }
      config_drive: "True"
      user_data_format: RAW
      user_data:
        get_resource: server_two_init
  
  
  apache:
    type: "OS::Heat::SoftwareConfig"
    depends_on: haproxy
    properties:
      config:
        str_replace:
          template: |
            #!/usr/bin/env bash 
            #TODO support multiple roles. 
            roles=$ROLES
            #Create unique role names to ensure correct minion deployment. 
            #TODO include vm id for metering.
            UNIQUE_ROLE_ID="$ROLES_$IDENTIFIER"
            TARGET='"G@environment:$ENV and G@roles:'"$UNIQUE_ROLE_ID"'"' 
            echo "environment:" > /etc/salt/grains
            echo "  $ENV" >> /etc/salt/grains
            echo "identifier:" >> /etc/salt/grains
            echo "  $IDENTIFIER" >> /etc/salt/grains   
            echo "roles:">> /etc/salt/grains
            echo "  $UNIQUE_ROLE_ID" >> /etc/salt/grains
            service salt-minion restart
            sleep 60
            #Build Dynamic top.sls
            #POST Signal entry to tell stack its complete. 
            salt-call event.send 'generate/environment' '{name:'" $UNIQUE_ROLE_ID"', sid: "$IDENTIFIER",  tgt:'" $TARGET"', tgt_type: "compound", salt_env: "$ENV", sls: $SLS , include_pillar: "true" }'         
          params:
            $ENV: base
            $ROLES: apache
            $IDENTIFIER: { get_param: 'OS::stack_name' }
            $SLS: '["apache","zeron"]'

  
  apache_two:
    type: "OS::Heat::SoftwareConfig"
    depends_on: haproxy
    properties:
      config:
        str_replace:
          template: |
            #!/usr/bin/env bash 
            #TODO support multiple roles. 
            roles=$ROLES
            #Create unique role names to ensure correct minion deployment. 
            #TODO include vm id for metering.
            UNIQUE_ROLE_ID="$ROLES_$IDENTIFIER"
            TARGET='"G@environment:$ENV and G@roles:'"$UNIQUE_ROLE_ID"'"' 
            echo "environment:" > /etc/salt/grains
            echo "  $ENV" >> /etc/salt/grains
            echo "identifier:" >> /etc/salt/grains
            echo "  $IDENTIFIER" >> /etc/salt/grains              
            echo "roles:">> /etc/salt/grains
            echo "  $UNIQUE_ROLE_ID" >> /etc/salt/grains
            service salt-minion restart
            sleep 60        
          params:
            $ENV: base
            $ROLES: apache
            $IDENTIFIER: { get_param: 'OS::stack_name' }
            $SLS: '["apache","zeron"]'
  
  
  mysql:
    type: "OS::Heat::SoftwareConfig"
    depends_on: [ apache, apache_two] 
    properties:
      config:
        str_replace:
          template: |
            #!/usr/bin/env bash 
            #TODO support multiple roles. 
            roles=$ROLES
            #Create unique role names to ensure correct minion deployment. 
            #TODO include vm id for metering.
            UNIQUE_ROLE_ID="$ROLES_$IDENTIFIER"
            TARGET='"G@environment:$ENV and G@roles:'"$UNIQUE_ROLE_ID"'"' 
            echo "environment:" > /etc/salt/grains
            echo "  $ENV" >> /etc/salt/grains
            echo "identifier:" >> /etc/salt/grains
            echo "  $IDENTIFIER" >> /etc/salt/grains   
            echo "roles:">> /etc/salt/grains
            echo "  $UNIQUE_ROLE_ID" >> /etc/salt/grains
            service salt-minion restart
            sleep 70
            #Build Dynamic top.sls
            #PRE Create Server Prequiestes entry
            salt-call event.send 'generate/environment' '{name:'" $UNIQUE_ROLE_ID"', sid: "$IDENTIFIER",  tgt:'" $TARGET"', tgt_type: "compound", salt_env: "$ENV", sls: $SLS , include_pillar: "true" }'
            #POST Signal entry to tell stack its complete. 
            salt-call event.send 'generate/environment' '{name: "orchestration_finished", sid: "$IDENTIFIER",  tgt: "G@environment:$ENV and G@orchestrator:master", tgt_type: "compound", salt_env: "$ENV", sls: "'["base.signal"]'", include_pillar: "true" }'
          params:
            $ENV: base
            $ROLES: mysql
            $IDENTIFIER: { get_param: 'OS::stack_name' }
            $SLS: '["mysql","zeron"]'
  
  wait_condition:
    type: "AWS::CloudFormation::WaitCondition"
    depends_on: rhel_server_four
    properties:
      Handle: { get_resource: wait_handle }
      Timeout: 1500

  wait_handle:
    type: "AWS::CloudFormation::WaitConditionHandle"
       
  server_two_init:
    type: OS::Heat::MultipartMime
    depends_on: rhel_server_one
    properties:
      parts:
      - config: {get_resource: bootstrap_salt}
      - config: {get_resource: apache}

  server_three_init:
    type: OS::Heat::MultipartMime
    depends_on: rhel_server_one
    properties:
      parts:
      - config: {get_resource: bootstrap_salt}
      - config: {get_resource: apache_two}
              
  server_one_server_one_fbd19302-f247-4816-b53e-a664f3dc72c1_port_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_network }
      port_id: { get_resource: server_one_fbd19302-f247-4816-b53e-a664f3dc72c1_port }

  server_one_fbd19302-f247-4816-b53e-a664f3dc72c1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_network }
      security_groups: [{ get_param: security_group }]

 


  server_two_fbd19302-f247-4816-b53e-a664f3dc72c1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_network }
      security_groups: [{ get_param: security_group }]

  rhel_server_three:
    type: OS::Nova::Server
    depends_on: rhel_server_one
    properties:
      networks:
          - port: { get_resource: server_three_fbd19302-f247-4816-b53e-a664f3dc72c1_port  }
      name: webserver2
      image: { get_param: image_id }
      key_name: { get_param: key_name }
      flavor: { get_param: flavor }
      config_drive: "True"
      user_data_format: RAW
      user_data:
        get_resource: server_three_init


  server_three_fbd19302-f247-4816-b53e-a664f3dc72c1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_network }
      security_groups: [{ get_param: security_group }]

  rhel_server_four:
    type: OS::Nova::Server
    depends_on: [ rhel_server_two, rhel_server_three ]
    properties:      
      networks:
          - port: { get_resource: server_four_fbd19302-f247-4816-b53e-a664f3dc72c1_port  }
      name: database
      image: { get_param: image_id }
      key_name: { get_param: key_name }
      flavor: { get_param: flavor }
      config_drive: "True"
      user_data_format: RAW
      user_data:
        get_resource: server_four_init
            

  server_four_fbd19302-f247-4816-b53e-a664f3dc72c1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_network }
      security_groups: [{ get_param: security_group }]

outputs:
    
  zeron_url:
    description: zeron console
    value: 
      str_replace:
        template: http://HOST:8000
        params:
          HOST: { get_attr:[server_one_server_one_fbd19302-f247-4816-b53e-a664f3dc72c1_port_floating_ip, floating_ip_address] }
  
  ha_proxy_url:
    description: haproxy url
    value: 
      str_replace:
        template: http://HOST:80
        params:
          HOST: { get_attr:[server_one_server_one_fbd19302-f247-4816-b53e-a664f3dc72c1_port_floating_ip, floating_ip_address] }
